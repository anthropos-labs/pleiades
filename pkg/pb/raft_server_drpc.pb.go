// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.30
// source: raft_server.proto

package pb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_raft_server_proto struct{}

func (drpcEncoding_File_raft_server_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_raft_server_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_raft_server_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_raft_server_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_raft_server_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCRaftConfigServiceClient interface {
	DRPCConn() drpc.Conn

	PutConfiguration(ctx context.Context, in *PutRaftConfigRequest) (*NewRaftConfigResponse, error)
	GetConfiguration(ctx context.Context, in *GetRaftConfigRequest) (*GetRaftConfigResponse, error)
	ListConfigurations(ctx context.Context, in *ListRaftConfigsRequest) (*ListRaftConfigsResponse, error)
}

type drpcRaftConfigServiceClient struct {
	cc drpc.Conn
}

func NewDRPCRaftConfigServiceClient(cc drpc.Conn) DRPCRaftConfigServiceClient {
	return &drpcRaftConfigServiceClient{cc}
}

func (c *drpcRaftConfigServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcRaftConfigServiceClient) PutConfiguration(ctx context.Context, in *PutRaftConfigRequest) (*NewRaftConfigResponse, error) {
	out := new(NewRaftConfigResponse)
	err := c.cc.Invoke(ctx, "/RaftConfigService/PutConfiguration", drpcEncoding_File_raft_server_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcRaftConfigServiceClient) GetConfiguration(ctx context.Context, in *GetRaftConfigRequest) (*GetRaftConfigResponse, error) {
	out := new(GetRaftConfigResponse)
	err := c.cc.Invoke(ctx, "/RaftConfigService/GetConfiguration", drpcEncoding_File_raft_server_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcRaftConfigServiceClient) ListConfigurations(ctx context.Context, in *ListRaftConfigsRequest) (*ListRaftConfigsResponse, error) {
	out := new(ListRaftConfigsResponse)
	err := c.cc.Invoke(ctx, "/RaftConfigService/ListConfigurations", drpcEncoding_File_raft_server_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCRaftConfigServiceServer interface {
	PutConfiguration(context.Context, *PutRaftConfigRequest) (*NewRaftConfigResponse, error)
	GetConfiguration(context.Context, *GetRaftConfigRequest) (*GetRaftConfigResponse, error)
	ListConfigurations(context.Context, *ListRaftConfigsRequest) (*ListRaftConfigsResponse, error)
}

type DRPCRaftConfigServiceUnimplementedServer struct{}

func (s *DRPCRaftConfigServiceUnimplementedServer) PutConfiguration(context.Context, *PutRaftConfigRequest) (*NewRaftConfigResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCRaftConfigServiceUnimplementedServer) GetConfiguration(context.Context, *GetRaftConfigRequest) (*GetRaftConfigResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCRaftConfigServiceUnimplementedServer) ListConfigurations(context.Context, *ListRaftConfigsRequest) (*ListRaftConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCRaftConfigServiceDescription struct{}

func (DRPCRaftConfigServiceDescription) NumMethods() int { return 3 }

func (DRPCRaftConfigServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/RaftConfigService/PutConfiguration", drpcEncoding_File_raft_server_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCRaftConfigServiceServer).
					PutConfiguration(
						ctx,
						in1.(*PutRaftConfigRequest),
					)
			}, DRPCRaftConfigServiceServer.PutConfiguration, true
	case 1:
		return "/RaftConfigService/GetConfiguration", drpcEncoding_File_raft_server_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCRaftConfigServiceServer).
					GetConfiguration(
						ctx,
						in1.(*GetRaftConfigRequest),
					)
			}, DRPCRaftConfigServiceServer.GetConfiguration, true
	case 2:
		return "/RaftConfigService/ListConfigurations", drpcEncoding_File_raft_server_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCRaftConfigServiceServer).
					ListConfigurations(
						ctx,
						in1.(*ListRaftConfigsRequest),
					)
			}, DRPCRaftConfigServiceServer.ListConfigurations, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterRaftConfigService(mux drpc.Mux, impl DRPCRaftConfigServiceServer) error {
	return mux.Register(impl, DRPCRaftConfigServiceDescription{})
}

type DRPCRaftConfigService_PutConfigurationStream interface {
	drpc.Stream
	SendAndClose(*NewRaftConfigResponse) error
}

type drpcRaftConfigService_PutConfigurationStream struct {
	drpc.Stream
}

func (x *drpcRaftConfigService_PutConfigurationStream) SendAndClose(m *NewRaftConfigResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_raft_server_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCRaftConfigService_GetConfigurationStream interface {
	drpc.Stream
	SendAndClose(*GetRaftConfigResponse) error
}

type drpcRaftConfigService_GetConfigurationStream struct {
	drpc.Stream
}

func (x *drpcRaftConfigService_GetConfigurationStream) SendAndClose(m *GetRaftConfigResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_raft_server_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCRaftConfigService_ListConfigurationsStream interface {
	drpc.Stream
	SendAndClose(*ListRaftConfigsResponse) error
}

type drpcRaftConfigService_ListConfigurationsStream struct {
	drpc.Stream
}

func (x *drpcRaftConfigService_ListConfigurationsStream) SendAndClose(m *ListRaftConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_raft_server_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
