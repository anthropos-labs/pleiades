// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.30
// source: etcd/v3/rpc.proto

package v3

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_etcd_v3_rpc_proto struct{}

func (drpcEncoding_File_etcd_v3_rpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_etcd_v3_rpc_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_etcd_v3_rpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_etcd_v3_rpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_etcd_v3_rpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCKVClient interface {
	DRPCConn() drpc.Conn

	Range(ctx context.Context, in *RangeRequest) (*RangeResponse, error)
	Put(ctx context.Context, in *PutRequest) (*PutResponse, error)
	DeleteRange(ctx context.Context, in *DeleteRangeRequest) (*DeleteRangeResponse, error)
	Txn(ctx context.Context, in *TxnRequest) (*TxnResponse, error)
	Compact(ctx context.Context, in *CompactionRequest) (*CompactionResponse, error)
}

type drpcKVClient struct {
	cc drpc.Conn
}

func NewDRPCKVClient(cc drpc.Conn) DRPCKVClient {
	return &drpcKVClient{cc}
}

func (c *drpcKVClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcKVClient) Range(ctx context.Context, in *RangeRequest) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.KV/Range", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcKVClient) Put(ctx context.Context, in *PutRequest) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.KV/Put", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcKVClient) DeleteRange(ctx context.Context, in *DeleteRangeRequest) (*DeleteRangeResponse, error) {
	out := new(DeleteRangeResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.KV/DeleteRange", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcKVClient) Txn(ctx context.Context, in *TxnRequest) (*TxnResponse, error) {
	out := new(TxnResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.KV/Txn", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcKVClient) Compact(ctx context.Context, in *CompactionRequest) (*CompactionResponse, error) {
	out := new(CompactionResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.KV/Compact", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCKVServer interface {
	Range(context.Context, *RangeRequest) (*RangeResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	DeleteRange(context.Context, *DeleteRangeRequest) (*DeleteRangeResponse, error)
	Txn(context.Context, *TxnRequest) (*TxnResponse, error)
	Compact(context.Context, *CompactionRequest) (*CompactionResponse, error)
}

type DRPCKVUnimplementedServer struct{}

func (s *DRPCKVUnimplementedServer) Range(context.Context, *RangeRequest) (*RangeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCKVUnimplementedServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCKVUnimplementedServer) DeleteRange(context.Context, *DeleteRangeRequest) (*DeleteRangeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCKVUnimplementedServer) Txn(context.Context, *TxnRequest) (*TxnResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCKVUnimplementedServer) Compact(context.Context, *CompactionRequest) (*CompactionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCKVDescription struct{}

func (DRPCKVDescription) NumMethods() int { return 5 }

func (DRPCKVDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/etcdserverpb.KV/Range", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKVServer).
					Range(
						ctx,
						in1.(*RangeRequest),
					)
			}, DRPCKVServer.Range, true
	case 1:
		return "/etcdserverpb.KV/Put", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKVServer).
					Put(
						ctx,
						in1.(*PutRequest),
					)
			}, DRPCKVServer.Put, true
	case 2:
		return "/etcdserverpb.KV/DeleteRange", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKVServer).
					DeleteRange(
						ctx,
						in1.(*DeleteRangeRequest),
					)
			}, DRPCKVServer.DeleteRange, true
	case 3:
		return "/etcdserverpb.KV/Txn", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKVServer).
					Txn(
						ctx,
						in1.(*TxnRequest),
					)
			}, DRPCKVServer.Txn, true
	case 4:
		return "/etcdserverpb.KV/Compact", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKVServer).
					Compact(
						ctx,
						in1.(*CompactionRequest),
					)
			}, DRPCKVServer.Compact, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterKV(mux drpc.Mux, impl DRPCKVServer) error {
	return mux.Register(impl, DRPCKVDescription{})
}

type DRPCKV_RangeStream interface {
	drpc.Stream
	SendAndClose(*RangeResponse) error
}

type drpcKV_RangeStream struct {
	drpc.Stream
}

func (x *drpcKV_RangeStream) SendAndClose(m *RangeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCKV_PutStream interface {
	drpc.Stream
	SendAndClose(*PutResponse) error
}

type drpcKV_PutStream struct {
	drpc.Stream
}

func (x *drpcKV_PutStream) SendAndClose(m *PutResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCKV_DeleteRangeStream interface {
	drpc.Stream
	SendAndClose(*DeleteRangeResponse) error
}

type drpcKV_DeleteRangeStream struct {
	drpc.Stream
}

func (x *drpcKV_DeleteRangeStream) SendAndClose(m *DeleteRangeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCKV_TxnStream interface {
	drpc.Stream
	SendAndClose(*TxnResponse) error
}

type drpcKV_TxnStream struct {
	drpc.Stream
}

func (x *drpcKV_TxnStream) SendAndClose(m *TxnResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCKV_CompactStream interface {
	drpc.Stream
	SendAndClose(*CompactionResponse) error
}

type drpcKV_CompactStream struct {
	drpc.Stream
}

func (x *drpcKV_CompactStream) SendAndClose(m *CompactionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWatchClient interface {
	DRPCConn() drpc.Conn

	Watch(ctx context.Context) (DRPCWatch_WatchClient, error)
}

type drpcWatchClient struct {
	cc drpc.Conn
}

func NewDRPCWatchClient(cc drpc.Conn) DRPCWatchClient {
	return &drpcWatchClient{cc}
}

func (c *drpcWatchClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcWatchClient) Watch(ctx context.Context) (DRPCWatch_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, "/etcdserverpb.Watch/Watch", drpcEncoding_File_etcd_v3_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcWatch_WatchClient{stream}
	return x, nil
}

type DRPCWatch_WatchClient interface {
	drpc.Stream
	Send(*WatchRequest) error
	Recv() (*WatchResponse, error)
}

type drpcWatch_WatchClient struct {
	drpc.Stream
}

func (x *drpcWatch_WatchClient) Send(m *WatchRequest) error {
	return x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

func (x *drpcWatch_WatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcWatch_WatchClient) RecvMsg(m *WatchResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

type DRPCWatchServer interface {
	Watch(DRPCWatch_WatchStream) error
}

type DRPCWatchUnimplementedServer struct{}

func (s *DRPCWatchUnimplementedServer) Watch(DRPCWatch_WatchStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCWatchDescription struct{}

func (DRPCWatchDescription) NumMethods() int { return 1 }

func (DRPCWatchDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/etcdserverpb.Watch/Watch", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCWatchServer).
					Watch(
						&drpcWatch_WatchStream{in1.(drpc.Stream)},
					)
			}, DRPCWatchServer.Watch, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterWatch(mux drpc.Mux, impl DRPCWatchServer) error {
	return mux.Register(impl, DRPCWatchDescription{})
}

type DRPCWatch_WatchStream interface {
	drpc.Stream
	Send(*WatchResponse) error
	Recv() (*WatchRequest, error)
}

type drpcWatch_WatchStream struct {
	drpc.Stream
}

func (x *drpcWatch_WatchStream) Send(m *WatchResponse) error {
	return x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

func (x *drpcWatch_WatchStream) Recv() (*WatchRequest, error) {
	m := new(WatchRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcWatch_WatchStream) RecvMsg(m *WatchRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

type DRPCLeaseClient interface {
	DRPCConn() drpc.Conn

	LeaseGrant(ctx context.Context, in *LeaseGrantRequest) (*LeaseGrantResponse, error)
	LeaseRevoke(ctx context.Context, in *LeaseRevokeRequest) (*LeaseRevokeResponse, error)
	LeaseKeepAlive(ctx context.Context) (DRPCLease_LeaseKeepAliveClient, error)
	LeaseTimeToLive(ctx context.Context, in *LeaseTimeToLiveRequest) (*LeaseTimeToLiveResponse, error)
	LeaseLeases(ctx context.Context, in *LeaseLeasesRequest) (*LeaseLeasesResponse, error)
}

type drpcLeaseClient struct {
	cc drpc.Conn
}

func NewDRPCLeaseClient(cc drpc.Conn) DRPCLeaseClient {
	return &drpcLeaseClient{cc}
}

func (c *drpcLeaseClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcLeaseClient) LeaseGrant(ctx context.Context, in *LeaseGrantRequest) (*LeaseGrantResponse, error) {
	out := new(LeaseGrantResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Lease/LeaseGrant", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcLeaseClient) LeaseRevoke(ctx context.Context, in *LeaseRevokeRequest) (*LeaseRevokeResponse, error) {
	out := new(LeaseRevokeResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Lease/LeaseRevoke", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcLeaseClient) LeaseKeepAlive(ctx context.Context) (DRPCLease_LeaseKeepAliveClient, error) {
	stream, err := c.cc.NewStream(ctx, "/etcdserverpb.Lease/LeaseKeepAlive", drpcEncoding_File_etcd_v3_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcLease_LeaseKeepAliveClient{stream}
	return x, nil
}

type DRPCLease_LeaseKeepAliveClient interface {
	drpc.Stream
	Send(*LeaseKeepAliveRequest) error
	Recv() (*LeaseKeepAliveResponse, error)
}

type drpcLease_LeaseKeepAliveClient struct {
	drpc.Stream
}

func (x *drpcLease_LeaseKeepAliveClient) Send(m *LeaseKeepAliveRequest) error {
	return x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

func (x *drpcLease_LeaseKeepAliveClient) Recv() (*LeaseKeepAliveResponse, error) {
	m := new(LeaseKeepAliveResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcLease_LeaseKeepAliveClient) RecvMsg(m *LeaseKeepAliveResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

func (c *drpcLeaseClient) LeaseTimeToLive(ctx context.Context, in *LeaseTimeToLiveRequest) (*LeaseTimeToLiveResponse, error) {
	out := new(LeaseTimeToLiveResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Lease/LeaseTimeToLive", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcLeaseClient) LeaseLeases(ctx context.Context, in *LeaseLeasesRequest) (*LeaseLeasesResponse, error) {
	out := new(LeaseLeasesResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Lease/LeaseLeases", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCLeaseServer interface {
	LeaseGrant(context.Context, *LeaseGrantRequest) (*LeaseGrantResponse, error)
	LeaseRevoke(context.Context, *LeaseRevokeRequest) (*LeaseRevokeResponse, error)
	LeaseKeepAlive(DRPCLease_LeaseKeepAliveStream) error
	LeaseTimeToLive(context.Context, *LeaseTimeToLiveRequest) (*LeaseTimeToLiveResponse, error)
	LeaseLeases(context.Context, *LeaseLeasesRequest) (*LeaseLeasesResponse, error)
}

type DRPCLeaseUnimplementedServer struct{}

func (s *DRPCLeaseUnimplementedServer) LeaseGrant(context.Context, *LeaseGrantRequest) (*LeaseGrantResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCLeaseUnimplementedServer) LeaseRevoke(context.Context, *LeaseRevokeRequest) (*LeaseRevokeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCLeaseUnimplementedServer) LeaseKeepAlive(DRPCLease_LeaseKeepAliveStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCLeaseUnimplementedServer) LeaseTimeToLive(context.Context, *LeaseTimeToLiveRequest) (*LeaseTimeToLiveResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCLeaseUnimplementedServer) LeaseLeases(context.Context, *LeaseLeasesRequest) (*LeaseLeasesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCLeaseDescription struct{}

func (DRPCLeaseDescription) NumMethods() int { return 5 }

func (DRPCLeaseDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/etcdserverpb.Lease/LeaseGrant", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCLeaseServer).
					LeaseGrant(
						ctx,
						in1.(*LeaseGrantRequest),
					)
			}, DRPCLeaseServer.LeaseGrant, true
	case 1:
		return "/etcdserverpb.Lease/LeaseRevoke", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCLeaseServer).
					LeaseRevoke(
						ctx,
						in1.(*LeaseRevokeRequest),
					)
			}, DRPCLeaseServer.LeaseRevoke, true
	case 2:
		return "/etcdserverpb.Lease/LeaseKeepAlive", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCLeaseServer).
					LeaseKeepAlive(
						&drpcLease_LeaseKeepAliveStream{in1.(drpc.Stream)},
					)
			}, DRPCLeaseServer.LeaseKeepAlive, true
	case 3:
		return "/etcdserverpb.Lease/LeaseTimeToLive", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCLeaseServer).
					LeaseTimeToLive(
						ctx,
						in1.(*LeaseTimeToLiveRequest),
					)
			}, DRPCLeaseServer.LeaseTimeToLive, true
	case 4:
		return "/etcdserverpb.Lease/LeaseLeases", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCLeaseServer).
					LeaseLeases(
						ctx,
						in1.(*LeaseLeasesRequest),
					)
			}, DRPCLeaseServer.LeaseLeases, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterLease(mux drpc.Mux, impl DRPCLeaseServer) error {
	return mux.Register(impl, DRPCLeaseDescription{})
}

type DRPCLease_LeaseGrantStream interface {
	drpc.Stream
	SendAndClose(*LeaseGrantResponse) error
}

type drpcLease_LeaseGrantStream struct {
	drpc.Stream
}

func (x *drpcLease_LeaseGrantStream) SendAndClose(m *LeaseGrantResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCLease_LeaseRevokeStream interface {
	drpc.Stream
	SendAndClose(*LeaseRevokeResponse) error
}

type drpcLease_LeaseRevokeStream struct {
	drpc.Stream
}

func (x *drpcLease_LeaseRevokeStream) SendAndClose(m *LeaseRevokeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCLease_LeaseKeepAliveStream interface {
	drpc.Stream
	Send(*LeaseKeepAliveResponse) error
	Recv() (*LeaseKeepAliveRequest, error)
}

type drpcLease_LeaseKeepAliveStream struct {
	drpc.Stream
}

func (x *drpcLease_LeaseKeepAliveStream) Send(m *LeaseKeepAliveResponse) error {
	return x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

func (x *drpcLease_LeaseKeepAliveStream) Recv() (*LeaseKeepAliveRequest, error) {
	m := new(LeaseKeepAliveRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcLease_LeaseKeepAliveStream) RecvMsg(m *LeaseKeepAliveRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

type DRPCLease_LeaseTimeToLiveStream interface {
	drpc.Stream
	SendAndClose(*LeaseTimeToLiveResponse) error
}

type drpcLease_LeaseTimeToLiveStream struct {
	drpc.Stream
}

func (x *drpcLease_LeaseTimeToLiveStream) SendAndClose(m *LeaseTimeToLiveResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCLease_LeaseLeasesStream interface {
	drpc.Stream
	SendAndClose(*LeaseLeasesResponse) error
}

type drpcLease_LeaseLeasesStream struct {
	drpc.Stream
}

func (x *drpcLease_LeaseLeasesStream) SendAndClose(m *LeaseLeasesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCClusterClient interface {
	DRPCConn() drpc.Conn

	MemberAdd(ctx context.Context, in *MemberAddRequest) (*MemberAddResponse, error)
	MemberRemove(ctx context.Context, in *MemberRemoveRequest) (*MemberRemoveResponse, error)
	MemberUpdate(ctx context.Context, in *MemberUpdateRequest) (*MemberUpdateResponse, error)
	MemberList(ctx context.Context, in *MemberListRequest) (*MemberListResponse, error)
	MemberPromote(ctx context.Context, in *MemberPromoteRequest) (*MemberPromoteResponse, error)
}

type drpcClusterClient struct {
	cc drpc.Conn
}

func NewDRPCClusterClient(cc drpc.Conn) DRPCClusterClient {
	return &drpcClusterClient{cc}
}

func (c *drpcClusterClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcClusterClient) MemberAdd(ctx context.Context, in *MemberAddRequest) (*MemberAddResponse, error) {
	out := new(MemberAddResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Cluster/MemberAdd", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcClusterClient) MemberRemove(ctx context.Context, in *MemberRemoveRequest) (*MemberRemoveResponse, error) {
	out := new(MemberRemoveResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Cluster/MemberRemove", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcClusterClient) MemberUpdate(ctx context.Context, in *MemberUpdateRequest) (*MemberUpdateResponse, error) {
	out := new(MemberUpdateResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Cluster/MemberUpdate", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcClusterClient) MemberList(ctx context.Context, in *MemberListRequest) (*MemberListResponse, error) {
	out := new(MemberListResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Cluster/MemberList", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcClusterClient) MemberPromote(ctx context.Context, in *MemberPromoteRequest) (*MemberPromoteResponse, error) {
	out := new(MemberPromoteResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Cluster/MemberPromote", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCClusterServer interface {
	MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error)
	MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error)
	MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error)
	MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error)
	MemberPromote(context.Context, *MemberPromoteRequest) (*MemberPromoteResponse, error)
}

type DRPCClusterUnimplementedServer struct{}

func (s *DRPCClusterUnimplementedServer) MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCClusterUnimplementedServer) MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCClusterUnimplementedServer) MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCClusterUnimplementedServer) MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCClusterUnimplementedServer) MemberPromote(context.Context, *MemberPromoteRequest) (*MemberPromoteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCClusterDescription struct{}

func (DRPCClusterDescription) NumMethods() int { return 5 }

func (DRPCClusterDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/etcdserverpb.Cluster/MemberAdd", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCClusterServer).
					MemberAdd(
						ctx,
						in1.(*MemberAddRequest),
					)
			}, DRPCClusterServer.MemberAdd, true
	case 1:
		return "/etcdserverpb.Cluster/MemberRemove", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCClusterServer).
					MemberRemove(
						ctx,
						in1.(*MemberRemoveRequest),
					)
			}, DRPCClusterServer.MemberRemove, true
	case 2:
		return "/etcdserverpb.Cluster/MemberUpdate", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCClusterServer).
					MemberUpdate(
						ctx,
						in1.(*MemberUpdateRequest),
					)
			}, DRPCClusterServer.MemberUpdate, true
	case 3:
		return "/etcdserverpb.Cluster/MemberList", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCClusterServer).
					MemberList(
						ctx,
						in1.(*MemberListRequest),
					)
			}, DRPCClusterServer.MemberList, true
	case 4:
		return "/etcdserverpb.Cluster/MemberPromote", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCClusterServer).
					MemberPromote(
						ctx,
						in1.(*MemberPromoteRequest),
					)
			}, DRPCClusterServer.MemberPromote, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterCluster(mux drpc.Mux, impl DRPCClusterServer) error {
	return mux.Register(impl, DRPCClusterDescription{})
}

type DRPCCluster_MemberAddStream interface {
	drpc.Stream
	SendAndClose(*MemberAddResponse) error
}

type drpcCluster_MemberAddStream struct {
	drpc.Stream
}

func (x *drpcCluster_MemberAddStream) SendAndClose(m *MemberAddResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCCluster_MemberRemoveStream interface {
	drpc.Stream
	SendAndClose(*MemberRemoveResponse) error
}

type drpcCluster_MemberRemoveStream struct {
	drpc.Stream
}

func (x *drpcCluster_MemberRemoveStream) SendAndClose(m *MemberRemoveResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCCluster_MemberUpdateStream interface {
	drpc.Stream
	SendAndClose(*MemberUpdateResponse) error
}

type drpcCluster_MemberUpdateStream struct {
	drpc.Stream
}

func (x *drpcCluster_MemberUpdateStream) SendAndClose(m *MemberUpdateResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCCluster_MemberListStream interface {
	drpc.Stream
	SendAndClose(*MemberListResponse) error
}

type drpcCluster_MemberListStream struct {
	drpc.Stream
}

func (x *drpcCluster_MemberListStream) SendAndClose(m *MemberListResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCCluster_MemberPromoteStream interface {
	drpc.Stream
	SendAndClose(*MemberPromoteResponse) error
}

type drpcCluster_MemberPromoteStream struct {
	drpc.Stream
}

func (x *drpcCluster_MemberPromoteStream) SendAndClose(m *MemberPromoteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMaintenanceClient interface {
	DRPCConn() drpc.Conn

	Alarm(ctx context.Context, in *AlarmRequest) (*AlarmResponse, error)
	Status(ctx context.Context, in *StatusRequest) (*StatusResponse, error)
	Defragment(ctx context.Context, in *DefragmentRequest) (*DefragmentResponse, error)
	HashKV(ctx context.Context, in *HashKVRequest) (*HashKVResponse, error)
	Snapshot(ctx context.Context, in *SnapshotRequest) (DRPCMaintenance_SnapshotClient, error)
	MoveLeader(ctx context.Context, in *MoveLeaderRequest) (*MoveLeaderResponse, error)
	Downgrade(ctx context.Context, in *DowngradeRequest) (*DowngradeResponse, error)
}

type drpcMaintenanceClient struct {
	cc drpc.Conn
}

func NewDRPCMaintenanceClient(cc drpc.Conn) DRPCMaintenanceClient {
	return &drpcMaintenanceClient{cc}
}

func (c *drpcMaintenanceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcMaintenanceClient) Alarm(ctx context.Context, in *AlarmRequest) (*AlarmResponse, error) {
	out := new(AlarmResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Maintenance/Alarm", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMaintenanceClient) Status(ctx context.Context, in *StatusRequest) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Maintenance/Status", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMaintenanceClient) Defragment(ctx context.Context, in *DefragmentRequest) (*DefragmentResponse, error) {
	out := new(DefragmentResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Maintenance/Defragment", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMaintenanceClient) HashKV(ctx context.Context, in *HashKVRequest) (*HashKVResponse, error) {
	out := new(HashKVResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Maintenance/HashKV", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMaintenanceClient) Snapshot(ctx context.Context, in *SnapshotRequest) (DRPCMaintenance_SnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, "/etcdserverpb.Maintenance/Snapshot", drpcEncoding_File_etcd_v3_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMaintenance_SnapshotClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCMaintenance_SnapshotClient interface {
	drpc.Stream
	Recv() (*SnapshotResponse, error)
}

type drpcMaintenance_SnapshotClient struct {
	drpc.Stream
}

func (x *drpcMaintenance_SnapshotClient) Recv() (*SnapshotResponse, error) {
	m := new(SnapshotResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMaintenance_SnapshotClient) RecvMsg(m *SnapshotResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

func (c *drpcMaintenanceClient) MoveLeader(ctx context.Context, in *MoveLeaderRequest) (*MoveLeaderResponse, error) {
	out := new(MoveLeaderResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Maintenance/MoveLeader", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMaintenanceClient) Downgrade(ctx context.Context, in *DowngradeRequest) (*DowngradeResponse, error) {
	out := new(DowngradeResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Maintenance/Downgrade", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCMaintenanceServer interface {
	Alarm(context.Context, *AlarmRequest) (*AlarmResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Defragment(context.Context, *DefragmentRequest) (*DefragmentResponse, error)
	HashKV(context.Context, *HashKVRequest) (*HashKVResponse, error)
	Snapshot(*SnapshotRequest, DRPCMaintenance_SnapshotStream) error
	MoveLeader(context.Context, *MoveLeaderRequest) (*MoveLeaderResponse, error)
	Downgrade(context.Context, *DowngradeRequest) (*DowngradeResponse, error)
}

type DRPCMaintenanceUnimplementedServer struct{}

func (s *DRPCMaintenanceUnimplementedServer) Alarm(context.Context, *AlarmRequest) (*AlarmResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMaintenanceUnimplementedServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMaintenanceUnimplementedServer) Defragment(context.Context, *DefragmentRequest) (*DefragmentResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMaintenanceUnimplementedServer) HashKV(context.Context, *HashKVRequest) (*HashKVResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMaintenanceUnimplementedServer) Snapshot(*SnapshotRequest, DRPCMaintenance_SnapshotStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMaintenanceUnimplementedServer) MoveLeader(context.Context, *MoveLeaderRequest) (*MoveLeaderResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMaintenanceUnimplementedServer) Downgrade(context.Context, *DowngradeRequest) (*DowngradeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCMaintenanceDescription struct{}

func (DRPCMaintenanceDescription) NumMethods() int { return 7 }

func (DRPCMaintenanceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/etcdserverpb.Maintenance/Alarm", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMaintenanceServer).
					Alarm(
						ctx,
						in1.(*AlarmRequest),
					)
			}, DRPCMaintenanceServer.Alarm, true
	case 1:
		return "/etcdserverpb.Maintenance/Status", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMaintenanceServer).
					Status(
						ctx,
						in1.(*StatusRequest),
					)
			}, DRPCMaintenanceServer.Status, true
	case 2:
		return "/etcdserverpb.Maintenance/Defragment", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMaintenanceServer).
					Defragment(
						ctx,
						in1.(*DefragmentRequest),
					)
			}, DRPCMaintenanceServer.Defragment, true
	case 3:
		return "/etcdserverpb.Maintenance/HashKV", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMaintenanceServer).
					HashKV(
						ctx,
						in1.(*HashKVRequest),
					)
			}, DRPCMaintenanceServer.HashKV, true
	case 4:
		return "/etcdserverpb.Maintenance/Snapshot", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMaintenanceServer).
					Snapshot(
						in1.(*SnapshotRequest),
						&drpcMaintenance_SnapshotStream{in2.(drpc.Stream)},
					)
			}, DRPCMaintenanceServer.Snapshot, true
	case 5:
		return "/etcdserverpb.Maintenance/MoveLeader", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMaintenanceServer).
					MoveLeader(
						ctx,
						in1.(*MoveLeaderRequest),
					)
			}, DRPCMaintenanceServer.MoveLeader, true
	case 6:
		return "/etcdserverpb.Maintenance/Downgrade", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMaintenanceServer).
					Downgrade(
						ctx,
						in1.(*DowngradeRequest),
					)
			}, DRPCMaintenanceServer.Downgrade, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterMaintenance(mux drpc.Mux, impl DRPCMaintenanceServer) error {
	return mux.Register(impl, DRPCMaintenanceDescription{})
}

type DRPCMaintenance_AlarmStream interface {
	drpc.Stream
	SendAndClose(*AlarmResponse) error
}

type drpcMaintenance_AlarmStream struct {
	drpc.Stream
}

func (x *drpcMaintenance_AlarmStream) SendAndClose(m *AlarmResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMaintenance_StatusStream interface {
	drpc.Stream
	SendAndClose(*StatusResponse) error
}

type drpcMaintenance_StatusStream struct {
	drpc.Stream
}

func (x *drpcMaintenance_StatusStream) SendAndClose(m *StatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMaintenance_DefragmentStream interface {
	drpc.Stream
	SendAndClose(*DefragmentResponse) error
}

type drpcMaintenance_DefragmentStream struct {
	drpc.Stream
}

func (x *drpcMaintenance_DefragmentStream) SendAndClose(m *DefragmentResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMaintenance_HashKVStream interface {
	drpc.Stream
	SendAndClose(*HashKVResponse) error
}

type drpcMaintenance_HashKVStream struct {
	drpc.Stream
}

func (x *drpcMaintenance_HashKVStream) SendAndClose(m *HashKVResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMaintenance_SnapshotStream interface {
	drpc.Stream
	Send(*SnapshotResponse) error
}

type drpcMaintenance_SnapshotStream struct {
	drpc.Stream
}

func (x *drpcMaintenance_SnapshotStream) Send(m *SnapshotResponse) error {
	return x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{})
}

type DRPCMaintenance_MoveLeaderStream interface {
	drpc.Stream
	SendAndClose(*MoveLeaderResponse) error
}

type drpcMaintenance_MoveLeaderStream struct {
	drpc.Stream
}

func (x *drpcMaintenance_MoveLeaderStream) SendAndClose(m *MoveLeaderResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMaintenance_DowngradeStream interface {
	drpc.Stream
	SendAndClose(*DowngradeResponse) error
}

type drpcMaintenance_DowngradeStream struct {
	drpc.Stream
}

func (x *drpcMaintenance_DowngradeStream) SendAndClose(m *DowngradeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuthClient interface {
	DRPCConn() drpc.Conn

	AuthEnable(ctx context.Context, in *AuthEnableRequest) (*AuthEnableResponse, error)
	AuthDisable(ctx context.Context, in *AuthDisableRequest) (*AuthDisableResponse, error)
	AuthStatus(ctx context.Context, in *AuthStatusRequest) (*AuthStatusResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest) (*AuthenticateResponse, error)
	UserAdd(ctx context.Context, in *AuthUserAddRequest) (*AuthUserAddResponse, error)
	UserGet(ctx context.Context, in *AuthUserGetRequest) (*AuthUserGetResponse, error)
	UserList(ctx context.Context, in *AuthUserListRequest) (*AuthUserListResponse, error)
	UserDelete(ctx context.Context, in *AuthUserDeleteRequest) (*AuthUserDeleteResponse, error)
	UserChangePassword(ctx context.Context, in *AuthUserChangePasswordRequest) (*AuthUserChangePasswordResponse, error)
	UserGrantRole(ctx context.Context, in *AuthUserGrantRoleRequest) (*AuthUserGrantRoleResponse, error)
	UserRevokeRole(ctx context.Context, in *AuthUserRevokeRoleRequest) (*AuthUserRevokeRoleResponse, error)
	RoleAdd(ctx context.Context, in *AuthRoleAddRequest) (*AuthRoleAddResponse, error)
	RoleGet(ctx context.Context, in *AuthRoleGetRequest) (*AuthRoleGetResponse, error)
	RoleList(ctx context.Context, in *AuthRoleListRequest) (*AuthRoleListResponse, error)
	RoleDelete(ctx context.Context, in *AuthRoleDeleteRequest) (*AuthRoleDeleteResponse, error)
	RoleGrantPermission(ctx context.Context, in *AuthRoleGrantPermissionRequest) (*AuthRoleGrantPermissionResponse, error)
	RoleRevokePermission(ctx context.Context, in *AuthRoleRevokePermissionRequest) (*AuthRoleRevokePermissionResponse, error)
}

type drpcAuthClient struct {
	cc drpc.Conn
}

func NewDRPCAuthClient(cc drpc.Conn) DRPCAuthClient {
	return &drpcAuthClient{cc}
}

func (c *drpcAuthClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAuthClient) AuthEnable(ctx context.Context, in *AuthEnableRequest) (*AuthEnableResponse, error) {
	out := new(AuthEnableResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/AuthEnable", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) AuthDisable(ctx context.Context, in *AuthDisableRequest) (*AuthDisableResponse, error) {
	out := new(AuthDisableResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/AuthDisable", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) AuthStatus(ctx context.Context, in *AuthStatusRequest) (*AuthStatusResponse, error) {
	out := new(AuthStatusResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/AuthStatus", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) Authenticate(ctx context.Context, in *AuthenticateRequest) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/Authenticate", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) UserAdd(ctx context.Context, in *AuthUserAddRequest) (*AuthUserAddResponse, error) {
	out := new(AuthUserAddResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/UserAdd", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) UserGet(ctx context.Context, in *AuthUserGetRequest) (*AuthUserGetResponse, error) {
	out := new(AuthUserGetResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/UserGet", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) UserList(ctx context.Context, in *AuthUserListRequest) (*AuthUserListResponse, error) {
	out := new(AuthUserListResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/UserList", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) UserDelete(ctx context.Context, in *AuthUserDeleteRequest) (*AuthUserDeleteResponse, error) {
	out := new(AuthUserDeleteResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/UserDelete", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) UserChangePassword(ctx context.Context, in *AuthUserChangePasswordRequest) (*AuthUserChangePasswordResponse, error) {
	out := new(AuthUserChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/UserChangePassword", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) UserGrantRole(ctx context.Context, in *AuthUserGrantRoleRequest) (*AuthUserGrantRoleResponse, error) {
	out := new(AuthUserGrantRoleResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/UserGrantRole", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) UserRevokeRole(ctx context.Context, in *AuthUserRevokeRoleRequest) (*AuthUserRevokeRoleResponse, error) {
	out := new(AuthUserRevokeRoleResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/UserRevokeRole", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) RoleAdd(ctx context.Context, in *AuthRoleAddRequest) (*AuthRoleAddResponse, error) {
	out := new(AuthRoleAddResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/RoleAdd", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) RoleGet(ctx context.Context, in *AuthRoleGetRequest) (*AuthRoleGetResponse, error) {
	out := new(AuthRoleGetResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/RoleGet", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) RoleList(ctx context.Context, in *AuthRoleListRequest) (*AuthRoleListResponse, error) {
	out := new(AuthRoleListResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/RoleList", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) RoleDelete(ctx context.Context, in *AuthRoleDeleteRequest) (*AuthRoleDeleteResponse, error) {
	out := new(AuthRoleDeleteResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/RoleDelete", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) RoleGrantPermission(ctx context.Context, in *AuthRoleGrantPermissionRequest) (*AuthRoleGrantPermissionResponse, error) {
	out := new(AuthRoleGrantPermissionResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/RoleGrantPermission", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAuthClient) RoleRevokePermission(ctx context.Context, in *AuthRoleRevokePermissionRequest) (*AuthRoleRevokePermissionResponse, error) {
	out := new(AuthRoleRevokePermissionResponse)
	err := c.cc.Invoke(ctx, "/etcdserverpb.Auth/RoleRevokePermission", drpcEncoding_File_etcd_v3_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAuthServer interface {
	AuthEnable(context.Context, *AuthEnableRequest) (*AuthEnableResponse, error)
	AuthDisable(context.Context, *AuthDisableRequest) (*AuthDisableResponse, error)
	AuthStatus(context.Context, *AuthStatusRequest) (*AuthStatusResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	UserAdd(context.Context, *AuthUserAddRequest) (*AuthUserAddResponse, error)
	UserGet(context.Context, *AuthUserGetRequest) (*AuthUserGetResponse, error)
	UserList(context.Context, *AuthUserListRequest) (*AuthUserListResponse, error)
	UserDelete(context.Context, *AuthUserDeleteRequest) (*AuthUserDeleteResponse, error)
	UserChangePassword(context.Context, *AuthUserChangePasswordRequest) (*AuthUserChangePasswordResponse, error)
	UserGrantRole(context.Context, *AuthUserGrantRoleRequest) (*AuthUserGrantRoleResponse, error)
	UserRevokeRole(context.Context, *AuthUserRevokeRoleRequest) (*AuthUserRevokeRoleResponse, error)
	RoleAdd(context.Context, *AuthRoleAddRequest) (*AuthRoleAddResponse, error)
	RoleGet(context.Context, *AuthRoleGetRequest) (*AuthRoleGetResponse, error)
	RoleList(context.Context, *AuthRoleListRequest) (*AuthRoleListResponse, error)
	RoleDelete(context.Context, *AuthRoleDeleteRequest) (*AuthRoleDeleteResponse, error)
	RoleGrantPermission(context.Context, *AuthRoleGrantPermissionRequest) (*AuthRoleGrantPermissionResponse, error)
	RoleRevokePermission(context.Context, *AuthRoleRevokePermissionRequest) (*AuthRoleRevokePermissionResponse, error)
}

type DRPCAuthUnimplementedServer struct{}

func (s *DRPCAuthUnimplementedServer) AuthEnable(context.Context, *AuthEnableRequest) (*AuthEnableResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) AuthDisable(context.Context, *AuthDisableRequest) (*AuthDisableResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) AuthStatus(context.Context, *AuthStatusRequest) (*AuthStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) UserAdd(context.Context, *AuthUserAddRequest) (*AuthUserAddResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) UserGet(context.Context, *AuthUserGetRequest) (*AuthUserGetResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) UserList(context.Context, *AuthUserListRequest) (*AuthUserListResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) UserDelete(context.Context, *AuthUserDeleteRequest) (*AuthUserDeleteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) UserChangePassword(context.Context, *AuthUserChangePasswordRequest) (*AuthUserChangePasswordResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) UserGrantRole(context.Context, *AuthUserGrantRoleRequest) (*AuthUserGrantRoleResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) UserRevokeRole(context.Context, *AuthUserRevokeRoleRequest) (*AuthUserRevokeRoleResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) RoleAdd(context.Context, *AuthRoleAddRequest) (*AuthRoleAddResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) RoleGet(context.Context, *AuthRoleGetRequest) (*AuthRoleGetResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) RoleList(context.Context, *AuthRoleListRequest) (*AuthRoleListResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) RoleDelete(context.Context, *AuthRoleDeleteRequest) (*AuthRoleDeleteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) RoleGrantPermission(context.Context, *AuthRoleGrantPermissionRequest) (*AuthRoleGrantPermissionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAuthUnimplementedServer) RoleRevokePermission(context.Context, *AuthRoleRevokePermissionRequest) (*AuthRoleRevokePermissionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAuthDescription struct{}

func (DRPCAuthDescription) NumMethods() int { return 17 }

func (DRPCAuthDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/etcdserverpb.Auth/AuthEnable", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					AuthEnable(
						ctx,
						in1.(*AuthEnableRequest),
					)
			}, DRPCAuthServer.AuthEnable, true
	case 1:
		return "/etcdserverpb.Auth/AuthDisable", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					AuthDisable(
						ctx,
						in1.(*AuthDisableRequest),
					)
			}, DRPCAuthServer.AuthDisable, true
	case 2:
		return "/etcdserverpb.Auth/AuthStatus", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					AuthStatus(
						ctx,
						in1.(*AuthStatusRequest),
					)
			}, DRPCAuthServer.AuthStatus, true
	case 3:
		return "/etcdserverpb.Auth/Authenticate", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					Authenticate(
						ctx,
						in1.(*AuthenticateRequest),
					)
			}, DRPCAuthServer.Authenticate, true
	case 4:
		return "/etcdserverpb.Auth/UserAdd", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					UserAdd(
						ctx,
						in1.(*AuthUserAddRequest),
					)
			}, DRPCAuthServer.UserAdd, true
	case 5:
		return "/etcdserverpb.Auth/UserGet", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					UserGet(
						ctx,
						in1.(*AuthUserGetRequest),
					)
			}, DRPCAuthServer.UserGet, true
	case 6:
		return "/etcdserverpb.Auth/UserList", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					UserList(
						ctx,
						in1.(*AuthUserListRequest),
					)
			}, DRPCAuthServer.UserList, true
	case 7:
		return "/etcdserverpb.Auth/UserDelete", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					UserDelete(
						ctx,
						in1.(*AuthUserDeleteRequest),
					)
			}, DRPCAuthServer.UserDelete, true
	case 8:
		return "/etcdserverpb.Auth/UserChangePassword", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					UserChangePassword(
						ctx,
						in1.(*AuthUserChangePasswordRequest),
					)
			}, DRPCAuthServer.UserChangePassword, true
	case 9:
		return "/etcdserverpb.Auth/UserGrantRole", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					UserGrantRole(
						ctx,
						in1.(*AuthUserGrantRoleRequest),
					)
			}, DRPCAuthServer.UserGrantRole, true
	case 10:
		return "/etcdserverpb.Auth/UserRevokeRole", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					UserRevokeRole(
						ctx,
						in1.(*AuthUserRevokeRoleRequest),
					)
			}, DRPCAuthServer.UserRevokeRole, true
	case 11:
		return "/etcdserverpb.Auth/RoleAdd", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					RoleAdd(
						ctx,
						in1.(*AuthRoleAddRequest),
					)
			}, DRPCAuthServer.RoleAdd, true
	case 12:
		return "/etcdserverpb.Auth/RoleGet", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					RoleGet(
						ctx,
						in1.(*AuthRoleGetRequest),
					)
			}, DRPCAuthServer.RoleGet, true
	case 13:
		return "/etcdserverpb.Auth/RoleList", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					RoleList(
						ctx,
						in1.(*AuthRoleListRequest),
					)
			}, DRPCAuthServer.RoleList, true
	case 14:
		return "/etcdserverpb.Auth/RoleDelete", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					RoleDelete(
						ctx,
						in1.(*AuthRoleDeleteRequest),
					)
			}, DRPCAuthServer.RoleDelete, true
	case 15:
		return "/etcdserverpb.Auth/RoleGrantPermission", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					RoleGrantPermission(
						ctx,
						in1.(*AuthRoleGrantPermissionRequest),
					)
			}, DRPCAuthServer.RoleGrantPermission, true
	case 16:
		return "/etcdserverpb.Auth/RoleRevokePermission", drpcEncoding_File_etcd_v3_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAuthServer).
					RoleRevokePermission(
						ctx,
						in1.(*AuthRoleRevokePermissionRequest),
					)
			}, DRPCAuthServer.RoleRevokePermission, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAuth(mux drpc.Mux, impl DRPCAuthServer) error {
	return mux.Register(impl, DRPCAuthDescription{})
}

type DRPCAuth_AuthEnableStream interface {
	drpc.Stream
	SendAndClose(*AuthEnableResponse) error
}

type drpcAuth_AuthEnableStream struct {
	drpc.Stream
}

func (x *drpcAuth_AuthEnableStream) SendAndClose(m *AuthEnableResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_AuthDisableStream interface {
	drpc.Stream
	SendAndClose(*AuthDisableResponse) error
}

type drpcAuth_AuthDisableStream struct {
	drpc.Stream
}

func (x *drpcAuth_AuthDisableStream) SendAndClose(m *AuthDisableResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_AuthStatusStream interface {
	drpc.Stream
	SendAndClose(*AuthStatusResponse) error
}

type drpcAuth_AuthStatusStream struct {
	drpc.Stream
}

func (x *drpcAuth_AuthStatusStream) SendAndClose(m *AuthStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_AuthenticateStream interface {
	drpc.Stream
	SendAndClose(*AuthenticateResponse) error
}

type drpcAuth_AuthenticateStream struct {
	drpc.Stream
}

func (x *drpcAuth_AuthenticateStream) SendAndClose(m *AuthenticateResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_UserAddStream interface {
	drpc.Stream
	SendAndClose(*AuthUserAddResponse) error
}

type drpcAuth_UserAddStream struct {
	drpc.Stream
}

func (x *drpcAuth_UserAddStream) SendAndClose(m *AuthUserAddResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_UserGetStream interface {
	drpc.Stream
	SendAndClose(*AuthUserGetResponse) error
}

type drpcAuth_UserGetStream struct {
	drpc.Stream
}

func (x *drpcAuth_UserGetStream) SendAndClose(m *AuthUserGetResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_UserListStream interface {
	drpc.Stream
	SendAndClose(*AuthUserListResponse) error
}

type drpcAuth_UserListStream struct {
	drpc.Stream
}

func (x *drpcAuth_UserListStream) SendAndClose(m *AuthUserListResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_UserDeleteStream interface {
	drpc.Stream
	SendAndClose(*AuthUserDeleteResponse) error
}

type drpcAuth_UserDeleteStream struct {
	drpc.Stream
}

func (x *drpcAuth_UserDeleteStream) SendAndClose(m *AuthUserDeleteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_UserChangePasswordStream interface {
	drpc.Stream
	SendAndClose(*AuthUserChangePasswordResponse) error
}

type drpcAuth_UserChangePasswordStream struct {
	drpc.Stream
}

func (x *drpcAuth_UserChangePasswordStream) SendAndClose(m *AuthUserChangePasswordResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_UserGrantRoleStream interface {
	drpc.Stream
	SendAndClose(*AuthUserGrantRoleResponse) error
}

type drpcAuth_UserGrantRoleStream struct {
	drpc.Stream
}

func (x *drpcAuth_UserGrantRoleStream) SendAndClose(m *AuthUserGrantRoleResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_UserRevokeRoleStream interface {
	drpc.Stream
	SendAndClose(*AuthUserRevokeRoleResponse) error
}

type drpcAuth_UserRevokeRoleStream struct {
	drpc.Stream
}

func (x *drpcAuth_UserRevokeRoleStream) SendAndClose(m *AuthUserRevokeRoleResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_RoleAddStream interface {
	drpc.Stream
	SendAndClose(*AuthRoleAddResponse) error
}

type drpcAuth_RoleAddStream struct {
	drpc.Stream
}

func (x *drpcAuth_RoleAddStream) SendAndClose(m *AuthRoleAddResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_RoleGetStream interface {
	drpc.Stream
	SendAndClose(*AuthRoleGetResponse) error
}

type drpcAuth_RoleGetStream struct {
	drpc.Stream
}

func (x *drpcAuth_RoleGetStream) SendAndClose(m *AuthRoleGetResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_RoleListStream interface {
	drpc.Stream
	SendAndClose(*AuthRoleListResponse) error
}

type drpcAuth_RoleListStream struct {
	drpc.Stream
}

func (x *drpcAuth_RoleListStream) SendAndClose(m *AuthRoleListResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_RoleDeleteStream interface {
	drpc.Stream
	SendAndClose(*AuthRoleDeleteResponse) error
}

type drpcAuth_RoleDeleteStream struct {
	drpc.Stream
}

func (x *drpcAuth_RoleDeleteStream) SendAndClose(m *AuthRoleDeleteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_RoleGrantPermissionStream interface {
	drpc.Stream
	SendAndClose(*AuthRoleGrantPermissionResponse) error
}

type drpcAuth_RoleGrantPermissionStream struct {
	drpc.Stream
}

func (x *drpcAuth_RoleGrantPermissionStream) SendAndClose(m *AuthRoleGrantPermissionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAuth_RoleRevokePermissionStream interface {
	drpc.Stream
	SendAndClose(*AuthRoleRevokePermissionResponse) error
}

type drpcAuth_RoleRevokePermissionStream struct {
	drpc.Stream
}

func (x *drpcAuth_RoleRevokePermissionStream) SendAndClose(m *AuthRoleRevokePermissionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_etcd_v3_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
